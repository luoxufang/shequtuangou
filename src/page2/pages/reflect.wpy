<template>
  <view class="myContainer">
    <form bindsubmit="formSubmit" bindreset="formReset">
      <view class="tuanzhangQuanyi">
        <view class="inputBox" style="border-bottom:0;padding-left: 34rpx;">
          <view class="inputname">提现金额</view>
          <input name="moneyNumber" type="number" value="{{allReflect}}" class="input" placeholder="请输入提现金额" placeholder-style="{{commonStyle}}"/>
        </view>
        <view class="textNotice">
          <view class="text">最多可提现{{maxMoney}}元，最少提现{{minMoney}}元</view>
          <view style="color:#50a6d5;" @tap="makeAllCash">全部提现</view>
        </view>

        <view class="bigBoxx">
          <view class="inputBox">
            <view class="inputname">提现方式</view>
            <picker disabled bindchange="bindPickerChange" value="" range="{{array}}">
              <input disabled='true' name="address" style="height:88rpx" value="{{pickerValue}}" placeholder="默认银行提现" placeholder-style="{{commonStyle}}"/>
            </picker>
          </view>
          <view class="inputBox">
            <view class="inputname">商户行名称</view>
            <input name="bankName" class="input" value="{{bankName}}" placeholder="请输入商户行" placeholder-style="{{commonStyle}}"/>
          </view>
          <view class="inputBox">
            <view class="inputname">银行卡号</view>
            <input name="bankNumber" type="number" class="input" value="{{bankNumber}}" placeholder="请输入银行卡号" placeholder-style="{{commonStyle}}"/>
          </view>
          <!-- <view class="inputBox">
            <view class="inputname">绑定手机</view>
            <input name="phone" bindinput="phoneChange" class="input" placeholder="请输入手机号" placeholder-style="{{commonStyle}}"/>
          </view>
          <view class="inputBox">
            <view class="inputname">验证码</view>
            <input name="codeIs" class="input" placeholder="请输入短信验证码" placeholder-style="{{commonStyle}}"/>
            <view class="codeBox {{changeColor ? 'changeColor': ''}}" @tap="getValidCode">
              <view class="childBox">{{count!=60? '重新获取('+count+'s)':'获取验证码'}}</view>
            </view>
          </view> -->
        </view>

      </view>

      <view class="btn_boxx">
        <button formType="submit">立即提现</button>
      </view>
      <view class="reflectRecode" @tap="reflectRecode">提现记录</view>
    </form>
  </view>
</template>
<script>
import wepy from 'wepy'
import tip from '@/utils/tip'
import api from '@/api/api';
export default class reflect extends wepy.page {
  config = {
      navigationBarTitleText: '提现'
    }
    data = {
      phoneNumber:'',
      count: 60,
      pickerValue:'',
      changeColor: false,
      // array: ['线下提现', '微信', '支付宝'],
      array: ['微信提现'],
      active: true,
      showAddress:'请选择提现方式',
      commonStyle:'font-size:28rpx;color:#666;opacity: 0.9;',
      keys:'',
      maxMoney: '0',
      minMoney: 1,
      allReflect: '',
      bankName: '',
      bankNumber: '',
    }
    onLoad(){
      this.getCashConfig()
    }
    methods = {
      async formSubmit(e){
        console.log(e)
        var RegExp = /^((0\d{2,3}-\d{7,8})|(1[3584]\d{9}))$/;
        if(!e.detail.value.moneyNumber){
          tip.toast('请输入提现金额')
        }else if(e.detail.value.moneyNumber<1){
          tip.toast('提现金额至少1元')
        }else if(!e.detail.value.bankName){
          tip.toast('请填写商户行名称')
        }else if (!e.detail.value.bankNumber) {
          tip.toast('请填写银行卡号')
        }
        // else if(!this.phoneNumber || !RegExp.test(this.phoneNumber)){
        //   tip.toast('请输入验证码')
        // }
        else{
          const data = await api.doCash({
            query:{
              amount: e.detail.value.moneyNumber,
              bankName: e.detail.value.bankName,
              bankNumber: e.detail.value.bankNumber,
              token: wx.getStorageSync('openid')
            },
            method:'post'
          });
          if(data.data.code==0){
            this.getCashConfig()
            let that = this
            that.allReflect = ''
            that.bankName = ''
            that.bankNumber = ''
            tip.toast('提交信息成功')
            
            that.$apply();
          }else{
            tip.toast(data.data.msg)
          }
        }
      },
      bindPickerChange(e) {
        this.pickerValue = this.array[e.detail.value]
      },
      getValidCode: function() {
        var RegExp = /^((0\d{2,3}-\d{7,8})|(1[3584]\d{9}))$/;
        if (!this.phoneNumber || !RegExp.test(this.phoneNumber)) {
          tip.toast('请正确填写号码')
        } else {
          if (this.count == 60) {
            this.tick();
            this.changeColor = true;

            return
            this.send_message();
          }
        }
      },
      reflectRecode(){
        this.$navigate(`./reflectRecode`)
      },
      makeAllCash(){
        this.allReflect = this.maxMoney
      }
    }
    async getCashConfig(){
      const data = await api.getCashConfig({
        query:{ token: wx.getStorageSync('openid') },
        method:'post'
      });
      if(!data.data.code){
        this.maxMoney = data.data.data.max
        this.minMoney = data.data.data.min
        // tip.toast()
        this.$apply();
      }
    }

    //发送验证码
    async send_message() {
      const data = await api.sendMobileCode({
        query:{ mobile:this.phoneNumber },
        method:'post'
      });
      if(data.data.code==0){
        tip.toast('发送成功，请注意查收')
        this.keys = data.data.keys
      }
    }
    tick() {
      var vm = this;
      if (vm.count > 0) {
        var count = vm.count - 1;
        vm.count = count;
        setTimeout(function() {
          return vm.tick();
        }, 1000);
      } else {
        (vm.count = 60), (vm.changeColor = false);
      }
      vm.$apply();
    }
}
</script>
<style lang="less">
.myContainer{
  background-color: #f7f7f7;
  padding-top: 24rpx;
  .tuanzhangQuanyi{
    line-height: 88rpx;
    .textNotice{
      height: 80rpx;
      line-height: inherit;
      font-size: 26rpx;
      color:#999;
      display: flex;
      padding: 0 34rpx;
      .text{
        flex:1;
      }
    }
    .bigBoxx{
      padding-left:34rpx;
      background: #fff;
    }
    .inputBox{
      display: flex;
      border-bottom: 1rpx solid #eee;
      background-color: #fff;
      .inputname{ width: 150rpx; }
      input{ color:#666; opacity: 0.9;}
      .input{ flex: 1;height: 88rpx; }
      .codeBox{
        display: flex;
        align-items:center;
        height: 88rpx;
        color: #666;
        .childBox{
          width: 210rpx;
          height: 40rpx;
          display: flex;
          align-items:center;
          justify-content:center;
          border-left: 1rpx solid #eee;
        }
      }
      .codeBox.changeColor{ color: #999;}
    }
    .inputBox:last-child{
      border: 0;
    }
  }
}
.reflectRecode{
  font-size: 26rpx;
  color: #fe4f63;
  line-height: 88rpx;
  text-align: center;
}
.btn_boxx{
  display: flex;
  height: 88rpx;
  padding: 0 34rpx;
  margin-top: 50rpx;
}
button{
  width: 100%;
  height: 100%;
  text-align: center;
  color: #fff;
  line-height: 88rpx;
  font-size:32rpx;
  background: #d91f54 !important;
}
button::after{
  border: 0;
}
</style>
