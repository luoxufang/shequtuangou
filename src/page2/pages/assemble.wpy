<template>
  <view class="orderDetail">
    <view class="good_cont">
      <!-- 成功 -->
      <view class="commonStyle goods_boxx">
        <!-- wx:for="{{detailInfo.list}}" wx:key="{{index}}" -->
        <view class="orderGoodsList">
          <image style="width:168rpx;height:168rpx;" mode="aspectFill" src="{{detailInfo.default_image}}"/>
          <view class="info_good">
            <view class="title">{{detailInfo.title}}</view>
            <view class="number" wx:if="{{detailInfo.planningValue.length}}">数量：1</view>
            <view class="money">￥{{detailInfo.mkt_price}}</view>
            <view class="now_money">实付金额：<text>￥{{detailInfo.price}}</text></view>
          </view>
          <view class="absolutebox" wx:if="{{!overAfterTime}}">
            <view wx:if="{{detailInfo.trade_status==4&&item.aftersales_status==0}}" @tap="applyAfterSale({{item.id}})" class="absoluteBtn">申请售后</view>
            <view wx:elif="{{detailInfo.trade_status==4&&item.aftersales_status==1}}" class="absoluteBtn class">售后中</view>
            <view wx:elif="{{detailInfo.trade_status==4&&item.aftersales_status==2}}" class="absoluteBtn">完成售后</view>
            <view wx:elif="{{detailInfo.trade_status==4&&item.aftersales_status==3}}" class="absoluteBtn class3">拒绝售后</view>
          </view>
        </view>
        
      </view>

      <view class="commonStyle goods_boxx">
        <view class="tuan_cell_list">
          <view class="image_con">
            <image mode="aspectFill" src="{{dataInfo.sysuserUser.avatar_logo}}"/>
            <image mode="aspectFill" wx:for="{{dataInfo.list}}" wx:key="index" src="{{item.sysuser_user.avatar_logo}}"/>
            <view class="circle-box"  wx:for="{{nullArr}}" wx:key="index">?</view>

          </view>
          <!-- <view class="timeNow" style="color:#999;margin:20rpx;padding-bottom:0;">拼主所选规格：红烧牛肉味30片</view> -->
          <view class="timeNow">
            <view>仅剩下{{dataInfo.group_people_num - detailInfo.item_store.store}}个名额， </view>
            <i-count-down class="i-count-down" style="height:48rpx;"
              target="{{targetTime1}}"
              clear-timer="{{clearTimer}}"
            ></i-count-down><view> 后结束</view>
          </view>

          <view class="shopButtom" @tap="onClickButton('group')">参与 {{dataInfo.sysuserUser.nickname}} 的拼单</view>
        </view>
      </view>
    </view>

    <!--TODO 滑出面板可以重构-->
    <view class="goods-buy-panel-cover" catchtouchmove="myCatchTouch" @tap="close"  wx:if="{{display}}"></view>
    <!--购买面板-->
    <view catchtouchmove="myCatchTouch" class="goods-buy-panel-container {{ display ? 'goods-buy-panel-show' : '' }}" >
      <view class="tanchaung">
        <view class="cont">
          <image class="delete_img" @tap="close" mode="aspectFill" src="../../assets/images/del.png"/>
          <view class="min_img"><image mode="aspectFill" src="{{defaultImg}}"/></view>
          <view class="right_proInfo">
            <view class="title">{{detailInfo.sub_title}}</view>
            <view class="fuhao_box">
              <text class="fuhao">￥</text><text class="money">{{tempPrice}}</text>
              <!-- <label>￥49.90</label> -->
            </view>
            <view wx:if="{{choosed_goods_no.length}}" class="choosed">请选择 
            <repeat wx:for="{{choosed_goods_no}}" wx:key="{{index}}">
              {{item}} </repeat>
            </view>
            <view wx:else  class="choosed">已选：
              <repeat wx:for="{{choosed_goods}}" wx:key="{{index}}">
                  “<text>{{item}}</text>”
              </repeat>
            </view>
          </view>
        </view>
        <scroll-view style="height:534rpx;position:relative;" android:scrollbars="none" scroll-y="true" class="my_table_list scroll-view_H">
          <view class="color_class" wx:for="{{spec_desc}}" wx:for-index="idx" wx:key="{{index}}">
            <view class="title">{{item.prop_name}}</view>
            <view class="color_list_box">
              <repeat for="{{item.child}}" key="item">
                <text wx:if="{{!item.flag}}" class="color_list {{item.active?'commonColor commonBorder' : ''}}" 
                @tap="addVal({{idx}},{{item.prop_value_id}},{{item.prop_value_image}})" data-index="{{index}}">{{item.prop_value}}</text>
                <!-- 置灰 -->
                <text wx:if="{{item.flag}}" class="color_list default">{{item.prop_value}}</text>
              </repeat>
            </view>
          </view>
          <!-- 加减数量 -->
          <view class="jiaAndJian">
            <view class="txt">购买数量</view>
            <view class="buy-num">
              <view class="jian-btn {{quantity==1? 'disabled' : ''}}" catchtap="jianBtnTap" data-index="{{index}}" data-id="{{item.id}}">-</view>
              <input type="number" value="{{quantity}}" disabled/>
              <view class="jia-btn {{quantity==1? 'disabled' : ''}}" catchtap="jiaBtnTap" data-index="{{index}}" data-id="{{item.id}}">+</view>
            </view>
          </view>
        </scroll-view>
        <view wx:if="{{!bugNowBtn}}" class="add_cart_btn" @tap="join_cart()"><view class="colorBtn">确定</view></view>
        <view wx:if="{{bugNowBtn}}" class="bug_now_btn" @tap="bug_now()"><view class="colorBtn">确定(立即)</view></view>
      </view>
    </view>
    
  </view>
</template>
<script>
import wepy from 'wepy'
import api from '@/api/api'
import tip from '@/utils/tip'
import aaa from '@/utils/aaa'
export default class orderDetail extends wepy.page {
  config = {
    navigationBarTitleText: '拼单详情',
    usingComponents: {
      "i-count-down": "../../resources/ui/count-down/index"
    }
  }
  data = {
    dataInfo:{},
    detailInfo:{},
    options:'',
    orderId:'',
    payType: 1,
    checked2: false,
    checked: false,
    yes_or_no: true,
    goodNumber: 0,
    targetTime1: new Date().getTime() + 10000,
    clearTimer: false,
    groupPeople:'',
    display: false,
    bugNowBtn:false,
    nullArr:[],

    display2:false,
    defaultImg:'',//重置
    tempPrice:'0.00',//重置
    choosed_goods:[],//重置
    choosed_goods_no:['规格'],//重置
    spec_desc:[],
    quantity: 1,//商品数量
    //选中的值，实始化时需要
    item_sku_ret:[],
    selectVal:[],
    allData:{},
    cacheData:{},
    keysData:[],
    skuVala:[],
  }
  onLoad(options){
    console.log(options)
    this.orderId = options.id//订单ID
    this.groupOrderDetail()
  }
  onUnload() {
    this.clearTimer = true;
    console.log("定时器关闭")
  }
  methods = {
    go_to_coupon(){
      wx.navigateTo({url: `./couponChoose?data=${this.detailInfo.couponInfo.coupons}`})
    },
    applyAfterSale(id){
      this.$navigate(`../page2/pages/saleCommit?id=${id}`)
    },
    jianBtnTap(){
      if(this.quantity<=1){ return }
      this.quantity--
    },
    jiaBtnTap(){
      if(this.quantity>=1){ return }
      this.quantity++
    },
    onClickButton(action) {
      console.log(this.detailInfo.planningValue)
      if(this.detailInfo.planningValue){//有规格的情况下
        this.display = true;
        if(action==1){
          this.bugNowBtn=true
          this.group_type = ''
        }else if(action=='group'){
          this.bugNowBtn=true
        }
      }else{//没有规格 this.infoVal++
        if(action==1){
          this.bug_now_request(0)
        }else{
          this.join_cart_request(0)
        }
      }
      this.$apply();
    },
    bug_now(){
      if(this.choosed_goods.length !== this.spec_desc.length){
        tip.toast('请选择商品属性')
      }else{
        let selectVal = this.selectVal.sort(function(a,b){
          return a>b ? 1:-1
        })
        this.bug_now_request(this.skuVala[this.selectVal.join(";")])
      }
    },
    addVal(index,val, info){
      console.log(index,val,info)
      //替换默认图片
      if(info){ this.defaultImg = info }
      //改变颜色，及更改值
      for(let i=0;i<this.spec_desc[index].child.length;i++){
        if(val == this.spec_desc[index].child[i].prop_value_id){
          if(this.spec_desc[index].child[i].active == true){
            this.spec_desc[index].child[i].active = false
            this.selectVal[index] = 0;
          }else{
            this.selectVal[index] = val;
            this.spec_desc[index].child[i].active = true
          }
        }else{
          this.spec_desc[index].child[i].active = false
        }
      }
      //----------111111111111-------------
      var tempPrice=[]
      for(let i=0;i < this.selectVal.length;i++){
        if(this.selectVal[i] > 0 ){
          tempPrice.push(this.selectVal[i])
        }
      }
      if(typeof(this.getPrice(tempPrice.join(';')).prices)!=='undefined'){
        this.tempPrice = this.getPrice(tempPrice.join(';')).prices[0]
      }
      // console.log(this.getPrice(tempPrice.join(';')),9999877,this.selectVal)
      //-----------111111111111-----------
      for(let i=0;i < this.spec_desc.length;i++){
        //跳过当前层
        if(i == index){
            continue;
        }
        let tempSelect = []
        tempSelect =  this.selectVal.concat()
        for(let j=0; j<this.spec_desc[i].child.length;j++){
          //跳过已选择的
          if(tempSelect[i]>0 && tempSelect[i] == this.spec_desc[i].child[j].prop_value_id){
              continue;
          }
          //组合值判断,判断当前
          tempSelect[i] = this.spec_desc[i].child[j].prop_value_id
          //组合
          let temp = []
          for(let k=0;k < tempSelect.length;k++){
            //剔除0值
            if(tempSelect[k] !=0 ){
              temp.push(tempSelect[k])
            }
          }
          //排序，小到大,发现问题再排
          //禁点
          if(aaa.getNum(temp.join(';'), this.cacheData, this.keysData, this.allData) <= 0){
            this.spec_desc[i].child[j].flag  = true
          }else{
            this.spec_desc[i].child[j].flag  = false
          }
        }
      }
      console.log(this.spec_desc,9999)
      console.log(this.selectVal)
      // spec_desc循环添加两个标记位
      let pofice = []
      let goods_yes = []
      let allTitle = []
      let choosedValue = this.spec_desc.map((item)=>{
        item.child.map((item2)=>{
          this.selectVal.map((index)=>{
            if(item2.prop_value_id == index){
              pofice.push(item2.prop_value)
              goods_yes.push(item.prop_name)
            }
            return item2.prop_value
          })
        })
        allTitle.push(item.prop_name)  //获取全部规格标题
      })
      console.log(goods_yes)
      //处理标题
      for(let i = 0; i < allTitle.length; i++) {
        for(let j = 0; j < goods_yes.length; j++) {
          if(allTitle[i] == goods_yes[j]){
            allTitle.splice(i,1);
          }
        }
      }
      // console.log('处理后:'+allTitle)
      this.choosed_goods = pofice
      this.choosed_goods_no = allTitle
    }
  }
  async bug_now_request(sku_id){
    //带参商品id、sku_id、数量1、是否团购标志、group_id跟团id，跳转"订单确认"
    if(this.group_type){
      wepy.navigateTo({
        url: `../../pages/orderConfirm?id=${this.options}&sku_id=${sku_id}&quantity=1&is_group=1`
      })
    }else{
      wepy.navigateTo({
        url: `../../pages/orderConfirm?id=${this.options}&sku_id=${sku_id}
        &quantity=1&is_group=1&group_id=${this.dataInfo.id}`
      })
    }
    
    this.close()
    this.$apply();
  }
  //----------------------------------初始化组合------------------------------------
  initSku(){
    let i, j, skuKeys = aaa.getObjKeys(this.allData);
    for(i = 0; i < skuKeys.length; i++) {
      var skuKey = skuKeys[i];//一条SKU信息key
      var sku = this.allData[skuKey]; //一条SKU信息value
      var skuKeyAttrs = skuKey.split(";"); //SKU信息key属性值数组
      var len = skuKeyAttrs.length;
      //对每个SKU信息key属性值进行拆分组合
      var combArr = aaa.arrayCombine(skuKeyAttrs);
      for(j = 0; j < combArr.length; j++) {
          this.add2SKUResult(combArr[j], sku);
      }
      //结果集接放入SKUResult
      this.cacheData[skuKey] = {
          count:sku.count,
          prices:[sku.price]
      }
    }
    this.$apply()
  }
  //把组合的key放入结果集SKUResult ***********
  add2SKUResult(combArrItem, sku) {
      var key = combArrItem.join(";");
      if(this.cacheData[key]) {//SKU信息key属性·
          this.cacheData[key].count += sku.count;
          this.cacheData[key].prices.push(sku.price);
      } else {
          this.cacheData[key] = {
              count : sku.count,
              prices : [sku.price]
          };
      }
      this.$apply()
  }

  getPrice(key) {
    //检查是否已计算过
    if (typeof this.cacheData[key] != 'undefined') {
        return this.cacheData[key];
    }
    return '0.00'
  }
  //加入购物车 判断
  join_cart(){
    if(this.choosed_goods.length !== this.spec_desc.length){
      tip.toast('请选择商品属性')
    }else{
      let selectVal = this.selectVal.sort(function(a,b){
        return a>b ? 1:-1
      })
      console.log(selectVal)
      //获取sku_id
      console.log('sku_id:'+this.skuVala[this.selectVal.join(";")])
      this.join_cart_request(this.skuVala[this.selectVal.join(";")])
    }
  }
  //加入购物车 请求
  
  close2 () { this.display2 = false; }
  close () {
    this.goods = null;
    this.action = 'cart';
    this.display = false;
    this.bugNowBtn = false
  }
  //----------------------------------初始化组合 结束------------------------------------
  async groupOrderDetail(){
    let preloadData = await api.groupOrderDetail({
      query:{ 
        token:wx.getStorageSync('openid'), 
        id:this.orderId
      },
      method:'POST'
    });
    if(preloadData.data.code==200){
      let num = 0;
      for(let i=0; i<preloadData.data.data.list.length; i++){
        num = num + parseInt(preloadData.data.data.list[i].num)
      }
      this.goodNumber = num
      this.dataInfo = preloadData.data.data
      this.detailInfo = preloadData.data.data.item_info
      this.options = preloadData.data.data.item_id //商品id
      //计算空的人数
      let nullPeopleNum = preloadData.data.data.group_people_num - preloadData.data.data.list.length -1
      var arr = new Array(nullPeopleNum)
      for (var i = 0; i < arr.length; i++) {
        arr[i] = i;
      }
      this.nullArr = arr
      //赋值倒计时
      this.targetTime1 = new Date().getTime() + Math.abs(preloadData.data.data.sec_to_time)
      //有规格的话，显示默认规格和图片
      if(preloadData.data.data.item_info.planningValue!==null){
        this.defaultImg = preloadData.data.data.item_info.planningValue[0].child[0].prop_value_image
        this.tempPrice = preloadData.data.data.item_info.item_sku[0].price
      }
      // 000000000000000000000000000000
        //初始化一级属性状态
        console.log(preloadData.data.data.item_info.planningValue)
        this.spec_desc = preloadData.data.data.item_info.planningValue;
        this.item_sku_ret = preloadData.data.data.item_info.item_sku
        this.$apply();

        if(this.spec_desc){
          //spec_desc循环添加两个标记位
          let spec_desc = this.spec_desc.map((item)=>{
            item.child.map((item)=>{
              item.flag = false
              item.active = false
              return item
            })
            return item
          })
          console.log(this.spec_desc)

          //初始化数据
          for(let i=0;i < this.item_sku_ret.length;i++){
            let temp = '';
            for(let j=0;j<this.item_sku_ret[i].spec_desc.length;j++){
              temp = temp + this.item_sku_ret[i].spec_desc[j].value + ";"
            }
            temp = temp.slice(0, -1);
            this.allData[temp] = {
              price: this.item_sku_ret[i].price,
              count:  this.item_sku_ret[i].store,
            }
          }
          console.log(this.allData)

          for(let i=0;i < this.spec_desc.length;i++){
            // 记录选值
            this.selectVal[i] = 0
            let temp = []
            for(let j=0; j<this.spec_desc[i].child.length;j++){
              temp.push(this.spec_desc[i].child[j].prop_value_id)
            }
            this.keysData.push(temp)
          }
          console.log('keysData:'+this.keysData)

          //初始化
          this.initSku()
          for(let i=0;i < this.spec_desc.length;i++){
            for(let j=0; j<this.spec_desc[i].child.length;j++){
              //禁点
              // console.log(this.getNum(this.spec_desc[i].child[j].prop_value_id),'9999',this.spec_desc[i].child[j].prop_value_id)
              if(aaa.getNum(this.spec_desc[i].child[j].prop_value_id, this.cacheData, this.keysData, this.allData) <= 0){
                this.spec_desc[i].child[j].flag  = true
                break;
              }else{
                this.spec_desc[i].child[j].flag  = false
              }
            }
          }
          
          let skuVal = []
          let skuVala = []
          for(let i=0; i< this.item_sku_ret.length; i++){
            skuVal=[]
            for(let j=0; j< this.item_sku_ret[i].spec_desc.length; j++){
              //skuVal[i].id = this.item_sku_ret[i].id
              skuVal.push(this.item_sku_ret[i].spec_desc[j].value)
            }
            skuVal = skuVal.sort(function(a,b){
              return a>b ? 1:-1
            })
            let bbb = skuVal.join(';')
            skuVala[bbb] = this.item_sku_ret[i].id
          }
          this.skuVala = skuVala
          console.log(skuVala)
        }
    // 000000000000000000000000000000
    }
    this.$apply();
  }
}
</script>
<style lang="less" scoped>
@import '../../utils/style.less';
switch{ zoom: .5; }
.orderDetail{
  background: #F6F6F6;
  .orderInfo{
    font-size: 26rpx;
    color:#999;
    text{
      display: inline-block;
    }
    span{
      color:#333;
      margin-left: 20rpx;
    }
  }
  .good_cont{
    padding: 24rpx 24rpx 100rpx 24rpx;
    .commonStyle{
      border-radius: 16rpx;
      background-color: #fff;
      box-shadow: 0 2px 9px 0 rgba(0,0,0,.04);
      overflow: hidden;
      margin-bottom: 20rpx;
      .modular{
        display: flex;
        padding: 30rpx;
        font-size: 26rpx;
        color: #999;
        border-bottom: 1rpx solid #f6f6f6;
        .now_time{flex: 1;}
        .now_time.aaa{
          font-size: 28rpx;
          color: #333;
        }
      }
      .orderGoodsList{
        display: flex;
        align-items: center;
        padding: 20rpx 30rpx;
        border-bottom: 1rpx solid #f6f6f6;
        position: relative;
        .info_good{
          padding-left: 24rpx;
          font-size:26rpx;
          color: #999;
          .title{font-size: 30rpx;color: #333;}
          .now_money{color: #333;text{font-size: 30rpx;color: #FF6356;}}
        }
        .absolutebox{
          position: absolute;
          bottom: 30rpx;
          right: 28rpx;
        }
        .absoluteBtn{
          width: 126rpx;
          height: 40rpx;
          border-radius: 34rpx;
          color: #666;
          border: 1rpx solid #ccc;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size:24rpx;
        }
        .absoluteBtn.class{
          border: 0;
          color:red;
        }
        .absoluteBtn.class3{
          color:red;
        }
      }
      .orderGoodsList:last-child{
        border-bottom:0;
      }
    }
  }
  .tuan_cell_list{
    overflow:hidden;
    margin-top:22rpx;
    padding-bottom:15rpx;
    .timeNow{
      color: #666;
      display: flex;
      align-items: center;
      justify-content: center;
      padding-bottom:24rpx;
    }
    .image_con{
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20rpx;
      image{
        width: 90rpx;
        height: 90rpx;
        border-radius: 50%;
      }
    }
    .shopButtom{
      height: 88rpx;
      background: #FF6356;
      font-size: 30rpx;
      border-radius: 14rpx;
      color: #fff;
      text-align: center;
      line-height: 88rpx;
      margin: 0 20rpx;
    }
    .circle-box{
      border: 1px solid #eeeeee;
      width: 90rpx;
      height: 90rpx;
      line-height: 90rpx;
      border-radius: 100rpx;
      margin-left: 10rpx;
      text-align: center;
      vertical-align: middle;
      color:  #eeeeee;
      font-size:38rpx;
    }
  }
  .btn_pay_box2{
    margin: 30rpx;
    height: 80rpx;
    border-radius: 36rpx;
    background: #FF6356;
    color: #fff;
    display: flex;
    align-items: center;
    justify-content: center;
  }
}
</style>
